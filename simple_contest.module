<?php
// $Id: simple_contest.module,v 1.1.2.1 2010/07/09 04:36:13 4vinoth Exp $
/**
 * @file
 * 
 * simple_contest custom module
 */
 

define('SIMPLE_CONTEST_STATUS_INACTIVE', 0);
define('SIMPLE_CONTEST_STATUS_ACTIVE', 1);
define('SIMPLE_CONTEST_STATUS_CANCELED', 2); 
define('SIMPLE_CONTEST_STATUS_COMPLETED', 3);

/**
 * Implementation of hook_help
 */
function simple_contest_help($path, $arg) {
  switch ($path) {
    case 'admin/help#simple_contest':
      $output = '<p>'. t('provides simple contest functionality to Drupal') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm
 */
function simple_contest_perm() {
	$perms = array();
	foreach (simple_contest_get_types() as $type => $info) {
		$perms[] = 'join ' . $type;
		//$perms[] = 'leave ' . $type;
		//$perms[] = 'access ' . $type . ' participants';
		$perms[] = 'finalize ' . $type;
	}
	$perms[] = 'administer simple contest';
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function simple_contest_menu() {
  $items = array();

  //Register a path for each simple_contest type
  foreach (simple_contest_get_types() as $type => $info) {
  
    $items['admin/content/node-type/'. str_replace('_', '-', $type) .'/simple_contest'] = array(
      'title' => 'Simple contest settings',
      'description' => 'Configure the simple contest.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simple_contest_content_type_settings_form', $type),
      'access callback' => 'user_access',
      'access arguments' => array('administer nodes'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
      'file' => 'simple_contest.admin.inc',
    );
    $items["user/%user/simple_contest/$type"] = array(
      'title' => $info->name,
      'title arguments' => array(1, $type),
      'page callback' => 'simple_contest_user_page',
      'page arguments' => array(1, $type),
      'access callback' => 'user_access',
      'access arguments' => array("access own $type participations"),
      'type' => MENU_LOCAL_TASK,
      'weight' => -1,
      'file' => 'simple_contest.pages.inc',
    );
  }

	$items['admin/settings/simple_contest'] = array(
		'title' => 'Simple contest Settings',
		'description' => 'Configure the Simple contests.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('simple_contest_admin_settings_form'),
		'access callback' => 'user_access',
		'access arguments' => array('administer simple contest'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
		'file' => 'simple_contest.admin.inc',
	);
	
	$items['node/%node/simple_contest'] = array(
		'title' => 'Contest',
		'description' => 'Finalize the winners for the contest.',
		'page callback' => 'simple_contest_finalize_page',
		'page arguments' => array(1),
		'access callback' => 'simple_contest_finalize_access',
		'access arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 5,
		'file' => 'simple_contest.pages.inc',
	);
	
  return $items;
}

function simple_contest_init(){  

	drupal_add_js(drupal_get_path('module', 'simple_contest') . '/js/simple_contest.js');
	module_load_include('inc', 'simple_contest', 'simple_contest.api');
	module_load_include('inc', 'simple_contest', 'simple_contest.token');
	
}


/**
 * Implementation of hook_form_alter().
 */
function simple_contest_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'node_type_form') {
    
    $form['simple_contest'] = array(
      '#type' => 'fieldset',
      '#title' => t('Simple contest'),
      '#collapsible' => TRUE,
			'#collapsed' => TRUE,
      '#weight' => 32,
    );
    $form['simple_contest']['simple_contest'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this content type as a Simple contest.'),
      '#default_value' => simple_contest_is_simple_contest($form['#node_type']->type),
      '#description' => t('additional configurations can be found in "Simple contest" tab.'),
      '#return_value' => array(),
    );
    
  }
	
  if (!empty($form['#node']->type) && simple_contest_is_contest_submission_type($form['#node']->type)) {
		
		$node = $form['#node'];
		
		// TODO : type should be dynamic
    $nids = simple_contest_get_active_contests('contest');
		
		/*if (empty($nids)){
			return;
		}
		*/
		
		$form['simple_contest'] = array(
			'#type' => 'fieldset',
			'#title' => t('Contest'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
			'#tree' => TRUE,
		);
		
		$options = array();
		foreach($nids as $nid){
			$options[$nid] = theme('simple_contest_node_title', node_load($nid));
		}
		$cnid = '';
		if(isset($node->simple_contest['contest_nid'])){
			$cnid = $node->simple_contest['contest_nid'];
		}
		if (!isset($options[$cnid]) && $cnid>0){
			$options[$cnid] = theme('simple_contest_node_title', node_load($cnid));
		}
		if(isset($_GET['contest']) && is_numeric($_GET['contest'])){
			$def_cid = $_GET['contest'];
			
		}else{
			$def_cid = $cnid;
		}
		$form['simple_contest']['contest_nid'] = array(
			'#type' => 'radios',
			'#title' => t('Choose the contest'),
			'#options' => $options,
			'#default_value' => $def_cid,
		);
		
		if( $cnid>0 ){
			$form['simple_contest']['contest_nid_old'] = array(
				'#type' => 'hidden',
				'#value' => $cnid,
			);
		}
  }
	
	if (!empty($form['#node']->type) && simple_contest_is_simple_contest($form['#node']->type)) {
		
		$node = $form['#node'];
		
		$form['simple_contest'] = array(
			'#type' => 'fieldset',
			'#title' => t('Contest'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
		);
		
		$options = array(
			SIMPLE_CONTEST_STATUS_INACTIVE => t('Disabled'), 
			SIMPLE_CONTEST_STATUS_ACTIVE => t('Active'),
			SIMPLE_CONTEST_STATUS_CANCELED => t('Canceled'),
			SIMPLE_CONTEST_STATUS_COMPLETED => t('Completed'),
		);
		
		$form['simple_contest']['status'] = array(
			'#type' => 'radios',
			'#title' => t('Contest status'),
			'#options' => $options,
			'#default_value' => $node->simple_contest['status'],
		);
		$form['simple_contest'] += array(
			'#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'simple_contest') : 1,
			'#tree' => TRUE,
		);
  }
}

/**
 * Implementation of hook_node_type():
 */
function simple_contest_node_type($op, $info) {
  switch ($op) {
    case 'delete':
      variable_del('simple_contest_'. $info->type);
      break;
    case 'update':    
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        if (simple_contest_is_simple_contest($info->old_type)) {
          $settings = variable_get('simple_contest_'. $info->old_type, array());
          variable_del('simple_contest_'. $info->old_type);
          variable_set('simple_contest_'. $info->type, $settings);
        }
      }
      break;
  }
}

function simple_contest_is_simple_contest($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  return is_array(variable_get('simple_contest_'. $type, FALSE));
}

/**
 * Implementation of hook_nodeapi().
 */
function simple_contest_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

	if(simple_contest_is_simple_contest($node->type)){
	
		$settings = simple_contest_get_settings($node->type);
		
		
		if ($op == 'insert'){ // && $settings['auto_create'] == 0){
			$sql = 'INSERT INTO {simple_contest_statistics} (nid, status, winners_count, participants_count, timstamp) 
			VALUES (%d, %d, 0, 0, %d)';
			db_query($sql, $node->nid, $node->simple_contest['status'], time());			
		}
		
		if ($op == 'update'){
			$sql = 'UPDATE {simple_contest_statistics} SET status = %d 
							WHERE nid = %d';
			db_query($sql, $node->simple_contest['status'], $node->nid);			
		}
		
		if ($op == 'load' ){
			$sql = 'SELECT * FROM {simple_contest_statistics} WHERE nid = %d ';
			$res = db_query($sql, $node->nid);
			
			$node->simple_contest = array();
			
			while($row = db_fetch_object($res)){
				$node->simple_contest['status'] = $row->status;
				$node->simple_contest['winners_count'] = $row->winners_count;
				$node->simple_contest['timstamp'] = $row->timstamp;
				break;
			}			
		}
		
		if ($op == 'validate'){
			//print_r($a3);
		}
		
		if ($op == 'delete'){ 
			$sql = 'DELETE FROM {simple_contest_statistics} WHERE nid = %d';
			db_query($sql, $node->nid);
			$sql = 'DELETE FROM {simple_contest_results} WHERE nid = %d';
			db_query($sql, $node->nid);
		}
		
		if($op == 'view'){
			if($node->simple_contest['status'] == SIMPLE_CONTEST_STATUS_COMPLETED){
				
				$node->content['simple_contest'] = array(
					'#value' => simple_contest_node_winners_themed($node),
				);
				
				$node->content['simple_contest'] += array(
					'#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'simple_contest') : 5,
				);
			}
		}
		
	}
	
	if (simple_contest_is_contest_submission_type($node->type)){
		
		if ($op == 'insert'){
			
			if(isset($node->simple_contest['contest_nid']) && $node->simple_contest['contest_nid'] > 0){
				$contest_node = node_load($node->simple_contest['contest_nid']);
				$settings = simple_contest_get_settings($contest_node->type);
				$ref_field = $settings['ref_field'];
				if ($ref_field && isset($contest_node->$ref_field)){
					$contest_node->{$ref_field}[count($contest_node->$ref_field)] = array(
						'value' => $node->simple_contest['contest_nid']
					);
					node_save($contest_node); // lets hooks called!
					
				}
			}
			
		}
		
		if ($op == 'update'){
			
			// delete the old contest
			if(isset($node->simple_contest['contest_nid_old'] ) && 
				!empty($node->simple_contest['contest_nid_old']) &&
				( empty($node->simple_contest['contest_nid'] ) ||  
				$node->simple_contest['contest_nid_old'] != $node->simple_contest['contest_nid'])){
				
				$contest_node = node_load($node->simple_contest['contest_nid_old']);
				$settings = simple_contest_get_settings($contest_node->type);
				$ref_field = $settings['ref_field'];
				
				if ($ref_field && isset($contest_node->$ref_field)){
					
					foreach($contest_node->$ref_field as $delta => $field){
						
						if($field['nid'] == $node->nid){
							unset($contest_node->{$ref_field}[$delta]);
							node_save($contest_node); // lets hooks called!
							
						}
					}
					
				}
			}
			
			// assign the new one
			if( ( empty($node->simple_contest['contest_nid_old'] ) ||  
				$node->simple_contest['contest_nid_old'] != $node->simple_contest['contest_nid']) && 
				isset($node->simple_contest['contest_nid']) && 
				!empty($node->simple_contest['contest_nid']) ){
				
				$contest_node = node_load($node->simple_contest['contest_nid']);
				$settings = simple_contest_get_settings($contest_node->type);
				$ref_field = $settings['ref_field'];
				if ($ref_field && isset($contest_node->$ref_field)){
					$contest_node->{$ref_field}[count($contest_node->$ref_field)] = array(
						'nid' => $node->nid,
					);
					node_save($contest_node); // lets hooks called!
					
				}
			}
		}
		
		if ( $op == 'load' ){
			// ??? : no way to get the ref field ?
			
			foreach (simple_contest_get_types() as $type => $info) {
				$settings = simple_contest_get_settings($type);
				$nids = simple_contest_referrers($node->nid, $settings['ref_field'], array($type));
				if (!empty($nids)){
					foreach($nids as $nid => $tnode){
						$node->simple_contest['contest_nid'] = $nid; // must be one?
					}
					break;
				}
			}
			
		}
		if ( $op == 'view' ){
			// ??? : no way to get the ref field ?
			
			if($node->simple_contest['contest_nid']){
				$contest_node = node_load($node->simple_contest['contest_nid']);
				$node->content['simple_contest'] = array(
					'#value' => theme('simple_contest_on_participant_node', $contest_node),
				);
				$node->content['simple_contest'] += array(
					'#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'simple_contest') : 5,
				);
			}
			
		}
		if ( $op == 'delete' ){
			
			if(!empty($node->simple_contest['contest_nid'] )){
				
				$contest_node = node_load($node->simple_contest['contest_nid']);
				$settings = simple_contest_get_settings($contest_node->type);
				$ref_field = $settings['ref_field'];
				
				if ($ref_field && isset($contest_node->$ref_field)){
					
					foreach($contest_node->$ref_field as $delta => $field){
						
						if($field['nid'] == $node->nid){
							unset($contest_node->{$ref_field}[$delta]);
							node_save($contest_node); // lets hooks called!
							
						}
					}
					
				}
				
				// delete winner node
				$sql = 'DELETE FROM {simple_contest_results} WHERE wnid = %d';
				db_query($sql, $node->nid);
				
			}
		}
		
	}
}

/**
 * Implementation of hook_link()
 */
function simple_contest_link($type, $object, $teaser = FALSE) {
	if ($type == 'node' && simple_contest_is_simple_contest($object->type)){
		
		// return if not active
		if($object->simple_contest['status'] != SIMPLE_CONTEST_STATUS_ACTIVE){
			return;
		}
		
		$settings = simple_contest_get_settings($object->type);
		$types = simple_contest_get_participant_types($object->type);
		
		$links = array();
		
		foreach($types as $type => $info){
			if(!node_access('create', $type)){
				continue;
			}
			$links['simple_contest_' .$type] = array(
				'href' => 'node/add/' . str_replace('_', '-', $type),
				'query' => array('contest' => $object->nid),
				'title' => t('submit ' . $info->name),
			);
		}
		return $links;
	}
}

/*
 * TODO : be dynamic
 */
function simple_contest_get_participant_types($type){
	$types = node_get_types('types');
	return array('design' => $types['design']);
}

/**
 * returns the list of available content types that are marked as simple contest.
 */
function simple_contest_get_types() {
  static $types = array();
  if (!$types){
    foreach (node_get_types('types') as $type => $info) {
      if (simple_contest_is_simple_contest($type)) {
        $types[$type] = $info;
      }
    }
  }
  return $types;
}

/**
 * Returns the simple_contest' settings
 * @param $type The content type to return settings for
 * @param $return 'all' or one of the simple_contest_available_settings(), 
 */
function simple_contest_get_settings($type, $return = 'all') {
  $settings = variable_get('simple_contest_'. $type, simple_contest_simple_contest_settings());
  $settings += simple_contest_settings_info();
  if ($return == 'all') {
    return $settings;
  }
  return $settings[$return];
}

function simple_contest_finalize_access($node, $account = NULL){
	global $user;
	
	if(!$account){
		$account = $user;
	}
	
	return simple_contest_is_simple_contest($node) && user_access('finalize ' . $node->type, $account);
	
}

/**
 * Implementation of hook_simple_contest_settings()
 */
function simple_contest_simple_contest_settings() {
  return array(
		'type' => 'contest',						// content type
		'winner_selection_type' => 'auto', // content type
    'view' => '',             			// default select view
		'view_field' => '',             // default select view field
		'results_display_view' => '',   // default select view
    'date_field' => 'field_date',   // must be defined in cck
		'ref_field' => '',   						// node reference or user reference field of the contest type
    'winner_type' => 'user',        // user or node
    'max_winners' => '1',           // multiple winners
		'email_to_winner' => 1,
		'email_to_participants' => 1,
		'email_to_admin' => 1,
		'email_to_winner_subject' => t('Congratulations! You got it!'),
		'email_to_winner_body' => t('
Hi !winner_name, 

Congratulations! You are the winner of the contest !contest_title. You can see the final results at !contest_url.
		
--
Thank You
!site_name
!site_url
		'),
		'email_to_participants_subject' => t('Final contest results anounced at !site_name'),
		'email_to_participants_body' => t('
Hi !participant_name, 

The final results for the contest "!contest_title" has been announced. You can see the final results at !contest_url.
	
--
Thank You
!site_name
!site_url
		'),
		'email_to_admin_subject' => t('Final contest results anounced at !site_name'),
		'email_to_admin_body' => t('
Hi, 

The final results for the contest "!contest_title" has been announced. You can see the final results at !contest_url.
	
--
Thank You
!site_name
!site_url
		'),
		'rrule' => '',									// repeat rule
		'auto_create' => 0,							// repeat rule enabled?
		'tz_handling' => '',						// time zone handling none, site, UTC, user
		'contest_defaults_nid' => '',		// the unpublished node which has the deaults values for the automatic created contests
  );
	
}

function simple_contest_is_contest_submission_type($type){
	if ($type == 'design'){
	return TRUE;
	}
}


/**
 * Returns an array, which defines the default value for each
 * available setting
 */
function simple_contest_settings_info() {
  return module_invoke_all('simple_contest_settings');
}


/**
 * Implementation of hook_cron().
 */
function simple_contest_cron() {

	simple_contest_finalize_results_all();
	
	simple_contest_repeat_create_contests();
	
}

/**
 * Implementation of hook_theme().
 */
function simple_contest_theme() {
	
  return array(
    'simple_contest_node_title' => array(
			'arguments' => array('node' => NULL),
			'file' => 'simple_contest.theme.inc',
		),
		'simple_contest_on_participant_node' => array(
			'arguments' => array('node' => NULL),
			'file' => 'simple_contest.theme.inc',
		),	
		'simple_contest_results_display' => array(
			'arguments' => array('node' => NULL, 'results' => NULL),
			'file' => 'simple_contest.theme.inc',
		),
		'simple_contest_views_selector' => array(
      'arguments' => array('element' => NULL),
			'file' => 'simple_contest.theme.inc',
    ),
  );
}

function simple_contest_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'simple_contest') . '/views',
  );
}

/**
 * Implementation of hook_mail().
 */
function simple_contest_mail($key, &$message, $params) {

	/*
	$contest_node = $params['contest_node'];
	$participant_user = $params['participant_user'];
	$participant_node = $params['participant_node'];
	$participant_rank = $params['participant_rank'];
	$settings = $params['settings'];
	*/
			
	switch($key){
	
		case 'winners_mail':

			
			$subject = $settings['email_to_winner_subject'];
			$body = $settings['email_to_winner_body'];
			
			$message['subject'] = token_replace_multiple($subject, $params);
			$message['body'][] = token_replace_multiple($body, $params);

			break;
		
		case 'admin_winners_mail':
		
			$subject = $settings['email_to_admin_subject'];
			$body = $settings['email_to_admin_body'];
			
			$message['subject'] = token_replace_multiple($subject, $params);
			$message['body'][] = token_replace_multiple($body, $params);
			
			break;
			
		case 'email_to_participants':
		
			$subject = $settings['email_to_participants_subject'];
			$body = $settings['email_to_participants_body'];
			
			$message['subject'] = token_replace_multiple($subject, $params);
			$message['body'][] = token_replace_multiple($body, $params);
			
			break;
	}
	
}

/**
 * Implementation of hook_content_extra_fields.
 *
 * Informations for non-CCK 'node fields' defined in core.
 */
function simple_contest_content_extra_fields($type_name) {
  $type = node_get_types('type', $type_name);
  $extra = array();

  $extra['simple_contest'] = array(
		'label' => t('Simple contest settings'),
		'description' => t('Simple contest form.'),
		'weight' => 10,
	);
  return $extra;
}


/**
 * Implementation of hook_elements().
 */
function simple_contest_elements() {
  $type['simple_contest_views_selector'] = array(
    '#input' => TRUE,
    '#view' => NULL,
    '#process' => array('simple_contest_views_selector_process'),
  );
  return $type;
}

/**
 * Process the simple_contest_views_selector element defined earlier.
 * 
 * @see simple_contest_views_selector_process()
 */
function simple_contest_views_selector_process($element, $edit) {
  $element['#tree'] = TRUE;
  if (!isset($element['#value'])) {
    $element['#value'] = array('selection' => array(), 'select_all' => FALSE);
  }

  $view = $element['#view'];
  $options = array();
  foreach ($view->result as $num => $object) {
    $options[$num+1] = '';
  }
  $element['selection']['#options'] = $options;
  $element['selection']['#value'] = $element['#value']['selection'];
  $element['selection']['#attributes'] = array();
  $element['selection'] = expand_checkboxes($element['selection']);
  
  $element['select_all'] = array('#type' => 'hidden', '#default_value' => $element['#value']['select_all']);
  return $element; 
}

/**
 * Implementation of hook_forms().
 * 
 * Force each instance of function to use the same callback.
 */
function simple_contest_forms() {
  // Get the form ID.
  $args = func_get_args();
  $form_id = $args[0];
  // Ensure we map a callback for our form and not something else.
  $forms = array();
  if (strpos($form_id, 'simple_contest_views_selector_form') === 0) {
    // Let the forms API know where to get the form data corresponding
    // to this form id.
    $forms[$form_id] = array('callback' => 'simple_contest_views_selector_form');
  }
  return $forms;
}


/**
 * simple_contest_views_selector_form. Thanks to views Bulk operations. 
 */
function simple_contest_views_selector_form($form_state, $plugin) {

  $default_objects = array('selection' => NULL, 'select_all' => FALSE);
  $default_operation = NULL;

	$form['exposed_input'] = array(
		'#type' => 'value',
		'#value' => $plugin->view->get_exposed_input(),
	);
	$form['arguments'] = array(
		'#type' => 'value',
		'#value' => $plugin->view->args,
	);

	// If empty view, render the empty text.
	if (!$plugin->view->result) {
		$form['empty'] = array('#value' => $plugin->view->display_handler->render_empty());
		return $form;
	}
  
  $form['#plugin'] = $plugin;
  
	$form['objects'] = array(
		'#type' => 'simple_contest_views_selector',
		'#view' => $plugin->view,
		'#sets' => $plugin->sets,
		'#value' => $default_objects,
		//'#prefix' => '<div class="simple-contest-views-selector">',
		//'#suffix' => '</div>',
	);
	
	$form['select']['op'] = array(
		'#type' => 'submit',
		'#value' => t('Finalize Winners'),
	);
  
  // Use views_bulk_operations_form_submit() for form submit, regardless of form_id.
  $form['#submit'][] = 'simple_contest_views_selector_form_submit';
  $form['#validate'][] = 'simple_contest_views_selector_form_validate';
	
  return $form;
}


/**
 * Submit handler for the selected operation.
 * 
 * @see views_bulk_operations_form()
 */
function simple_contest_views_selector_form_submit($form, &$form_state) {
  $plugin = $form['#plugin'];
  
	$selection = $form_state['values']['objects']['selection'];
	//print_r($form_state['values']);
	
	$node = node_load($form_state['values']['arguments'][0]);
	
	$settings = simple_contest_get_settings($node->type);
	
  $results = array();
	foreach ($plugin->view->result as $num => $result) {
		if ($selection[$num + 1]) {
			foreach($plugin->view->display_handler->handlers['field'] as $fid =>$field){
				//print($fid);
				if($fid == $settings['view_field']){
					//print_r($field);
					$results[] = $result->{$field->field_alias};
				}
			}
		}
	}
	if(!empty($results)){
		simple_contest_save_result($node, $results);	
		drupal_set_message(t('Contest results has been saved.'));
	}else{
		drupal_set_message(t('No winners has been selectd.'));
	}
	
	//print_r($results);
	
}
